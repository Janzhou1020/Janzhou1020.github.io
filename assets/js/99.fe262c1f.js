(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{549:function(s,n,t){"use strict";t.r(n);var a=t(7),r=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("基础指令")]),s._v(" "),n("p",[n("strong",[s._v("FROM")]),s._v("：指定构建镜像的基础镜像")]),s._v(" "),n("p",[s._v("FROM 指令是 Dockerfile 的第一条指令，并且每个 Dockerfile 必须有一个 FROM")]),s._v(" "),n("p",[s._v("语法：FROM <镜像名>:<标签>")]),s._v(" "),n("p",[s._v("例子：FROM ubuntu:20.04")]),s._v(" "),n("p",[n("strong",[s._v("MAINTAINER")]),s._v(" / "),n("strong",[s._v("LABEL")]),s._v("：用于指定镜像维护者的信息")]),s._v(" "),n("p",[s._v("语法：MAINTAINER <name>")]),s._v(" "),n("p",[s._v("例子：MAINTAINER John Doe <john@example.com>")]),s._v(" "),n("p",[s._v('例子：LABEL maintainer="John Doe '),n("a",{attrs:{href:"mailto:john@example.com"}},[s._v("john@example.com")]),s._v('"')]),s._v(" "),n("p",[n("strong",[s._v("RUN")]),s._v("：在构建镜像时执行命令，每个 RUN 创建一个新的镜像层")]),s._v(" "),n("p",[s._v("语法：RUN <命令>")]),s._v(" "),n("p",[s._v("例子：RUN apt-get update && apt-get install -y curl")]),s._v(" "),n("p",[n("strong",[s._v("CMD")]),s._v("：指定容器启动时要执行的默认命令")]),s._v(" "),n("p",[s._v("CMD 可以被 docker run 的命令覆盖")]),s._v(" "),n("p",[s._v('语法：CMD ["可执行文件", "参数1", "参数2"]')]),s._v(" "),n("p",[s._v('例子：CMD ["node", "app.js"]')]),s._v(" "),n("p",[s._v("这条指令表示容器启动时会运行 node app.js，如果在运行容器时提供了其他命令，该指令会被覆盖")]),s._v(" "),n("p",[n("strong",[s._v("EXPOSE")]),s._v("：声明容器应用程序使用的端口，用于文档化用途，并不自动映射到宿主机端口")]),s._v(" "),n("p",[s._v("语法：EXPOSE <端口号>")]),s._v(" "),n("p",[s._v("例子：EXPOSE 8080")]),s._v(" "),n("p",[n("strong",[s._v("ENV")]),s._v("：定义环境变量，允许在 Docker 容器内访问这些变量")]),s._v(" "),n("p",[s._v("语法：ENV <key>=<value>")]),s._v(" "),n("p",[s._v("例子：ENV NODE_ENV=production")]),s._v(" "),n("p",[n("strong",[s._v("ADD")]),s._v("：将文件或目录从构建上下文复制到容器内，并且可以处理远程 URL 和解压 .tar 文件")]),s._v(" "),n("p",[s._v("语法：ADD <源路径> <目标路径>")]),s._v(" "),n("p",[s._v("例子：ADD ./app.tar.gz /usr/src/app/")]),s._v(" "),n("p",[s._v("这条指令会将 app.tar.gz 文件添加到容器的 /usr/src/app 目录，并自动解压")]),s._v(" "),n("p",[n("strong",[s._v("COPY")]),s._v("：与 ADD 类似，但只能从本地系统复制文件或目录，不能处理远程 URL，也不能自动解压缩")]),s._v(" "),n("p",[s._v("语法：COPY <源路径> <目标路径>")]),s._v(" "),n("p",[s._v("例子：COPY . /usr/src/app")]),s._v(" "),n("p",[s._v("这条指令将当前目录下的所有文件和目录复制到容器的 /usr/src/app 目录")]),s._v(" "),n("p",[n("strong",[s._v("ENTRYPOINT")]),s._v("：配置容器启动时运行的主进程，与 CMD 类似，但 ENTRYPOINT 指定的命令不会被 docker run 覆盖")]),s._v(" "),n("p",[s._v('语法：ENTRYPOINT ["可执行文件", "参数1", "参数2"]')]),s._v(" "),n("p",[s._v('例子：ENTRYPOINT ["nginx", "-g", "daemon off;"]')]),s._v(" "),n("p",[s._v("这条指令表示容器启动时会运行 nginx 并且在前台运行，不会以守护进程模式（daemon）启动")]),s._v(" "),n("p",[n("strong",[s._v("VOLUME")]),s._v("：声明数据卷，用于容器和宿主机之间的数据共享或持久化")]),s._v(" "),n("p",[s._v('语法：VOLUME ["/数据/目录"]')]),s._v(" "),n("p",[s._v('例子：VOLUME ["/var/www/html"]')]),s._v(" "),n("p",[n("strong",[s._v("USER")]),s._v("：指定运行容器时使用的用户，默认是 root")]),s._v(" "),n("p",[s._v("语法：USER <用户名或UID>")]),s._v(" "),n("p",[s._v("例子：USER node")]),s._v(" "),n("p",[n("strong",[s._v("WORKDIR")]),s._v("：设置容器内的工作目录，相当于 cd 到某个目录，之后的 RUN, CMD, ENTRYPOINT 都会在该目录下执行")]),s._v(" "),n("p",[s._v("语法：WORKDIR <路径>")]),s._v(" "),n("p",[s._v("例子：WORKDIR /usr/src/app")]),s._v(" "),n("p",[s._v("这条指令将 /usr/src/app 设为工作目录，后续指令都将在该目录下运行")]),s._v(" "),n("p",[n("strong",[s._v("HEALTHCHECK")]),s._v("：定义容器的健康检查，用于判断容器是否在正常工作")]),s._v(" "),n("p",[s._v("语法：HEALTHCHECK [选项] CMD <命令>")]),s._v(" "),n("p",[s._v("例子：HEALTHCHECK --interval=30s --timeout=3s CMD curl -f http://localhost/ || exit 1")]),s._v(" "),n("p",[s._v("这条指令定义了一个健康检查，容器每隔 30 秒检查一次 http://localhost/，如果检查失败则容器会被标记为不健康")]),s._v(" "),n("p",[n("strong",[s._v("ARG")]),s._v("：定义构建时使用的变量，允许通过 docker build --build-arg 传递参数")]),s._v(" "),n("p",[s._v("语法：ARG <变量名>[=<默认值>]")]),s._v(" "),n("div",{staticClass:"language-dockerfile line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ARG")]),s._v(" VERSION=1.0")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" echo "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Building version $VERSION"')])]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这条指令定义了构建时的 VERSION 变量，默认值为 1.0，可以通过 docker build --build-arg VERSION=2.0 来覆盖")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("Dockerfile 完整实例")]),s._v(" "),n("div",{staticClass:"language-dockerfile line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从 Python 3.8 的官方镜像开始构建")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" python:3.8-slim")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 维护者信息")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LABEL")]),s._v(" maintainer="),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"John Doe <john@example.com>"')])]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置构建时的版本参数")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ARG")]),s._v(" APP_VERSION=1.0")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置环境变量")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" APP_HOME /app")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" APP_VERSION="),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${APP_VERSION}")])]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置工作目录")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${APP_HOME}")])]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 复制当前目录的文件到工作目录")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" . .")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装依赖")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" pip install --no-cache-dir -r requirements.txt")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 暴露端口")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 5000")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义容器启动时的命令")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"python"')]),s._v(", "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"app.py"')]),s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 健康检查")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token instruction"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HEALTHCHECK")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token options"}},[n("span",{pre:!0,attrs:{class:"token property"}},[s._v("--interval")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("30s")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v("--timeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("3s")])]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" curl -f http://localhost:5000/ || exit 1")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])])])}),[],!1,null,null,null);n.default=r.exports}}]);