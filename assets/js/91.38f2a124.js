(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{540:function(t,v,n){"use strict";n.r(v);var _=n(7),u=Object(_.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("基本命令："),v("code",[t._v("docker run [OPTIONS] IMAGE [COMMAND] [ARG...]")])]),t._v(" "),v("p",[v("strong",[t._v("常用选项")])]),t._v(" "),v("p",[v("strong",[t._v("-d")]),t._v("：在后台运行容器并返回容器ID")]),t._v(" "),v("p",[t._v("​\tdocker run -d ubuntu")]),t._v(" "),v("p",[v("strong",[t._v("-i")]),t._v("：保持标准输入（stdin）打开，通常与"),v("code",[t._v("-t")]),t._v("一起使用")]),t._v(" "),v("p",[t._v("​\tdocker run -i ubuntu")]),t._v(" "),v("p",[v("strong",[t._v("-t")]),t._v("：分配一个伪终端")]),t._v(" "),v("p",[t._v("​\tdocker run -it ubuntu")]),t._v(" "),v("p",[v("strong",[t._v("--name")]),t._v("：为容器指定一个名字，方便后续引用")]),t._v(" "),v("p",[t._v("​\tdocker run --name my-container ubuntu")]),t._v(" "),v("p",[v("strong",[t._v("-p")]),t._v("：将宿主机的端口映射到容器的端口")]),t._v(" "),v("p",[t._v("​\tdocker run -p 8080:80 nginx")]),t._v(" "),v("p",[t._v("-e：设置环境变量")]),t._v(" "),v("p",[t._v("​\tdocker run -e MY_ENV_VAR=value ubuntu")]),t._v(" "),v("p",[v("strong",[t._v("-v")]),t._v("：将宿主机的目录或文件挂载到容器中")]),t._v(" "),v("p",[t._v("​\tdocker run -v /host/path:/container/path ubuntu")]),t._v(" "),v("p",[t._v("--mount：用于将文件或目录挂载到容器中")]),t._v(" "),v("p",[t._v("​\t可以用于三种不同类型的挂载：绑定挂载、数据卷和 tmpfs 挂载")]),t._v(" "),v("p",[t._v("​\tdocker run --mount type=<类型>,source=<源>,target=<目标> [其他选项] <镜像>")]),t._v(" "),v("p",[t._v("​\ttype：bind、volume、tmpfs")]),t._v(" "),v("p",[t._v("​\tbind：绑定挂载将宿主机的文件或目录绑定到容器中的某个目录，通常用于开发环境，以便在容器中可以直接访问和修改宿主机上的文件")]),t._v(" "),v("p",[t._v("​\t"),v("strong",[t._v("bind mount")]),t._v(" 直接将宿主机的某个目录或文件挂载到容器中，而这个目录或文件完全是由宿主机的文件系统管理的，当容器被删除时，Docker 不会自动删除或影响宿主机上这些资源的内容")]),t._v(" "),v("p",[t._v("​\tvolume：数据卷是 Docker 管理的专用存储，独立于容器生命周期。即使容器被删除，卷中的数据依然会保留")]),t._v(" "),v("p",[t._v("​\ttmpfs：将数据存储在内存中，而不写入磁盘。当容器停止时，"),v("code",[t._v("tmpfs")]),t._v(" 数据将丢失，适用于敏感数据或临时文件")]),t._v(" "),v("p",[t._v("​\t例子1：docker run --mount type=bind,source=/path/on/host,target=/path/in/container nginx")]),t._v(" "),v("p",[t._v("​\t例子2：docker run --mount type=volume,source=my-volume,target=/data nginx")]),t._v(" "),v("p",[t._v("​\t例子3：docker run --mount type=tmpfs,target=/app tmpfs")]),t._v(" "),v("p",[t._v("--rm：容器停止时自动删除容器")]),t._v(" "),v("p",[t._v("​\tdocker run --rm ubuntu")]),t._v(" "),v("p",[t._v("--network：指定容器连接到的网络")]),t._v(" "),v("p",[t._v("​\tdocker run --network my-network ubuntu")]),t._v(" "),v("p",[t._v("--memory：设置容器的内存限制")]),t._v(" "),v("p",[t._v("​\tdocker run --memory 512m ubuntu")]),t._v(" "),v("p",[t._v("一些例子：")]),t._v(" "),v("p",[t._v("运行一个交互式的Ubuntu容器：docker run -it --name my-ubuntu ubuntu")]),t._v(" "),v("p",[t._v('在容器中运行一个命令：docker run --name my-alpine alpine echo "Hello, Docker!"')]),t._v(" "),v("p",[t._v("运行一个容器并将宿主机目录挂载到容器中：docker run -v /host/data:/container/data --name my-volume-container ubuntu")]),t._v(" "),v("p",[t._v("在容器中运行一个Web服务并映射端口：docker run -d -p 8080:80 --name my-web-server nginx")])])}),[],!1,null,null,null);v.default=u.exports}}]);